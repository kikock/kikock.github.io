# 将静态内容部署到 GitHub Pages 的工作流
name: 博客部署

on:
  # 在推送到 dev 分支时运行
  push:
    branches: ["dev"]

  # 允许从 Actions 标签手动运行此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在进行的运行和最新排队之间的排队运行。
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 合并和部署任务
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # 检出仓库代码
      - name: 检出仓库代码
        uses: actions/checkout@v4
        with:
          ref: dev  # 检出 dev 分支

      # 设置 Git 用户信息
      - name: 设置 Git 用户信息
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # 合并 dev 分支到 master 分支
      - name: 合并 dev 分支到 master 分支
        run: |
          git config --global user.name 'kikock'
          git config --global user.email 'kikock1987@gmail.com'
          git checkout master
          git merge dev
          git push origin master
      # 使用 PAT 推送更改
      - name: 推送更改到 master
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} master

      # 设置 GitHub Pages 配置
      - name: 设置 GitHub Pages 配置
        uses: actions/configure-pages@v5

      # 将整个仓库作为工件上传
      - name: 将整个仓库作为工件上传
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      # 将上传的工件部署到 GitHub Pages
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
